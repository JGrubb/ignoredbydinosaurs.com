<?php
// $Id: gmaps_term.module,v 1.1.2.5 2010/05/06 15:15:07 xmarket Exp $

/**
 * @file
 * Geodesical data and marker options for terms with Views integration.
 */

/*************
 * Constants *
 *************/

/**
 * Icon display options
 */
define('GMAPS_TERM_ICON_DISPLAY_DISABLED', 0);
define('GMAPS_TERM_ICON_DISPLAY_BEFORE', 1);
define('GMAPS_TERM_ICON_DISPLAY_AFTER', 2);
define('GMAPS_TERM_ICON_DISPLAY_REPLACE', 3);

/**
 * Use only the locality field in fast filters.
 */
define('GMAPS_TERM_FAST_FILTER_LOC', 01000);
/**
 * Use only the neighborhood(dependent locality) field in fast filters.
 */
define('GMAPS_TERM_FAST_FILTER_NH', 00100);
/**
 * Use only the zip(postalcode) field in fast filters.
 */
define('GMAPS_TERM_FAST_FILTER_ZIP', 00010);
/**
 * Use only the street, number(thoroughfare) field in fast filters.
 */
define('GMAPS_TERM_FAST_FILTER_ST', 00001);

define('GMAPS_TERM_FAST_FILTER_LOC_NH', 01100);
define('GMAPS_TERM_FAST_FILTER_LOC_ZIP', 01010);
define('GMAPS_TERM_FAST_FILTER_LOC_ST', 01001);
define('GMAPS_TERM_FAST_FILTER_NH_ZIP', 00110);
define('GMAPS_TERM_FAST_FILTER_NH_ST', 00101);
define('GMAPS_TERM_FAST_FILTER_ZIP_ST', 00011);

define('GMAPS_TERM_FAST_FILTER_LOC_NH_ZIP', 01110);
define('GMAPS_TERM_FAST_FILTER_LOC_NH_ST', 01101);
define('GMAPS_TERM_FAST_FILTER_LOC_ZIP_ST', 01011);
define('GMAPS_TERM_FAST_FILTER_NH_ZIP_ST', 00111);

define('GMAPS_TERM_FAST_FILTER_ALL', 01111);


/**
* Implementation of hook_menu().
*/
function gmaps_term_menu() {
  $items = array();

  //Admin pages
  $items['admin/content/taxonomy/delete-gmaps/%taxonomy_vocabulary/%'] = array(
    'title' => 'Delete GMaps data',
    'description' => 'Delete all GMaps data for all terms in a specific vocabulary.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gmaps_term_data_confirm_delete', 4, 5),
    'access arguments' => array('administer taxonomy'),
    'file' => 'includes/gmaps_term.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_taxonomy().
 */
function gmaps_term_taxonomy($op, $type, $array = NULL) {
  _gmaps_call_func('gmaps_term', 'admin', '_gmaps_term_taxonomy', array($op, $type, $array));
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_term_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  _gmaps_call_func('gmaps_term', 'admin', '_gmaps_term_form_taxonomy_form_vocabulary_alter', array(&$form, &$form_state));
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_term_form_taxonomy_form_term_alter(&$form, &$form_state) {
  _gmaps_call_func('gmaps_term', 'admin', '_gmaps_term_form_taxonomy_form_term_alter', array(&$form, &$form_state));
}

/**
 * Implementation of hook_views_api().
 */
function gmaps_term_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'gmaps_term') .'/includes'
  );
}

/**
 * Implementation of hook_views_data().
 */
function gmaps_term_views_data() {
  return _gmaps_call_func('gmaps_term', 'views-admin', '_gmaps_term_views_data');
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_term_form_devel_generate_taxonomy_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'gmaps_term_form_devel_generate_taxonomy_form_submit';
}

function gmaps_term_form_devel_generate_taxonomy_form_submit($form, &$form_state) {
  _gmaps_call_func('gmaps_term', 'admin', '_gmaps_term_form_devel_generate_taxonomy_form_submit', array($form, &$form_state));
}

function gmaps_term_geo_data_load($tid, $vid, $cacheable = TRUE, $reset = FALSE) {
  static $cache = array();
  
  if ($reset) {
    $cache = array();
  }

  if (empty($tid) || empty($vid)) {
    return;
  }
  
  if ($cacheable && isset($cache[$tid])) {
    return (object)gmaps_extend(array(), $cache[$tid]);
  }

  $settings = variable_get('gmaps_term_geo_data', array());
  $geo = isset($settings[$vid]) ? $settings[$vid] : array('type' => '');
  
  if (empty($geo['type'])) {
    return;
  }
  
  switch($geo['type']) {
    case 'gmaps_address':
      $geo_data = _gmaps_term_geo_address_load($tid);
      break;
      
    case 'gmaps_point':
      $geo_data = _gmaps_term_geo_point_load($tid);
      break;
      
    case 'gmaps_anp':
      $geo_data = _gmaps_term_geo_anp_load($tid);
      break;
  }
  
  if ($geo_data && $cacheable) {
    $cache[$tid] = (object)gmaps_extend(array(), $geo_data);
  }
  
  return $geo_data;
}

function _gmaps_term_geo_address_load($tid) {
  static $columns, $serialize;
  
  if (is_null($columns)) {
    $columns = $serialize = array();
    $schema = drupal_get_schema('gmaps_term_address');
    foreach ($schema['fields'] as $column => $info) {
      if ($info['serialize']) {
        $serialize[] = $column;
      }
      if (substr($column, 0, 2) != 'u_') {
        $columns[] = $column;
      }
    }
    $columns = implode(', ', $columns);
  }
  
  if ($adr = db_fetch_object(db_query("SELECT $columns FROM {gmaps_term_address} WHERE tid = %d", $tid))) {
    $adr->uid = 0;
    
    foreach($serialize as $column) {
      if (!empty($adr->$column)) {
        $adr->$column = unserialize($adr->$column);
      }
    }
  
    $geo_data = (object)array('address' => $adr);
  }
  
  return $geo_data;
}

function _gmaps_term_geo_point_load($tid) {
  static $serialize;
  
  if (is_null($serialize)) {
    $serialize = array();
    $schema = drupal_get_schema('gmaps_term_point');
    foreach ($schema['fields'] as $column => $info) {
      if ($info['serialize']) {
        $serialize[] = $column;
      }
    }
  }
  
  if ($point = db_fetch_object(db_query("SELECT * FROM {gmaps_term_point} WHERE tid = %d", $tid))) {
    $point->uid = 0;
    
    foreach($serialize as $column) {
      if (!empty($point->$column)) {
        $point->$column = unserialize($point->$column);
      }
    }

    $point->privacy = empty($point->privacy) ? array() : $point->privacy;
    $point->bounds = empty($point->bounds) ? array() : $point->bounds;
    $point->pov = empty($point->pov) ? array() : $point->pov;
    
    $geo_data = (object)array('point' => $point);
  }
  
  return $geo_data;
}

function _gmaps_term_geo_anp_load($tid) {
  $a = _gmaps_term_geo_address_load($tid);
  $p = _gmaps_term_geo_point_load($tid);
  
  if (gmaps_address_empty($a->address) || gmaps_point_empty($p->point)) {
    return;
  }
  
  $geo_data = gmaps_extend($a, $p);
  $geo_data->tid = $geo_data->point->tid;
  $geo_data->uid = 0;
  $geo_data->search = $geo_data->point->search;
  
  return $geo_data;
}

function gmaps_term_mo_data_load($tid, $cacheable = TRUE, $reset = FALSE) {
  static $cache = array();
  static $serialize;
  
  
  if ($reset) {
    $cache = array();
  }

  if (empty($tid)) {
    return;
  }
  
  if ($cacheable && isset($cache[$tid])) {
    return (object)gmaps_extend(array(), $cache[$tid]);
  }

  if (is_null($serialize)) {
    $serialize = array();
    $schema = drupal_get_schema('gmaps_term_marker_option');
    foreach ($schema['fields'] as $column => $info) {
      if ($info['serialize']) {
        $serialize[] = $column;
      }
    }
  }
  
  if ($mo_data = db_fetch_object(db_query("SELECT * FROM {gmaps_term_marker_option} WHERE tid = %d", $tid))) {
    foreach($serialize as $column) {
      if (!empty($mo_data->$column)) {
        $mo_data->$column = unserialize($mo_data->$column);
      }
    }
    
    if ($cacheable) {
      $cache[$tid] = (object)gmaps_extend(array(), $mo_data);
    }
  }
  
  return $mo_data;
}

function gmaps_term_geo_data_save(&$edit) {
  return _gmaps_call_func('gmaps_term', 'admin', '_gmaps_term_geo_data_save', array(&$edit));
}

function gmaps_term_geo_data_delete($tid) {
  return _gmaps_call_func('gmaps_term', 'admin', '_gmaps_term_geo_data_delete', array($tid));
}

function gmaps_term_mo_data_save(&$edit) {
  return _gmaps_call_func('gmaps_term', 'admin', '_gmaps_term_mo_data_save', array(&$edit));
}

function gmaps_term_mo_data_delete($tid, $parts = array()) {
  return _gmaps_call_func('gmaps_term', 'admin', '_gmaps_term_mo_data_delete', array($tid, $parts));
}

/**
 * Implementation of hook_link_alter().
 */
function gmaps_term_link_alter(&$links, $node) {
  if (empty($links)) {
    return;
  }
  
  $settings = variable_get('gmaps_term_marker_option', array());
  foreach($links as $key => $link) {
    if (preg_match('!taxonomy_term_(\d+)!', $key, $match)) {
      if (($term = $node->taxonomy[$match[1]]) && is_object($term)) {
        $mo = isset($settings[$term->vid]) ? $settings[$term->vid] : array(
          'icon' => array('enabled' => 0),
          'protected_icon' => array('enabled' => 0),
          'static_icon' => array('enabled' => 0),
          'protected_static_icon' => array('enabled' => 0),
        );
        
        if ($mo['icon']['enabled'] && $mo['icon']['show']) {
          if ($mo_data = gmaps_term_mo_data_load($term->tid)) {
            if (!empty($mo_data->icon) && $mo_data->icon != GMAPS_ICON_MAP_DEFAULT) {
              if ($icon = gmaps_icon_load($mo_data->icon)) {
                $markup = theme('gmaps_icon_preview', $icon->icon);
                
                switch ($mo['icon']['show']) {
                  case GMAPS_TERM_ICON_DISPLAY_BEFORE:
                    $link['title'] = $markup .' '. $link['title'];
                    break;
                  case GMAPS_TERM_ICON_DISPLAY_AFTER:
                    $link['title'] .= ' '. $markup;
                    break;
                  case GMAPS_TERM_ICON_DISPLAY_REPLACE:
                    $link['title'] = $markup;
                    break;
                }
                $link['html'] = TRUE;
                $links[$key] = $link;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_gmaps_map_info().
 */
function gmaps_term_gmaps_map_info($op, $type = NULL) {
  if ($op == 'default_maps') {
    $defaults = array();
    
    $display = gmaps_extend(array(), $type);
    
    $display['name'] = 'Term display '. gmaps_map_get_types('name', $type['type']);
    
    $defaults['term_display_'. $display['type']] = $display;
    
    return $defaults;
  }
}

/**
 * Implementation of hook_gmaps_static_map_info().
 */
function gmaps_term_gmaps_static_map_info($op) {
  if ($op == 'default_maps') {
    $defaults = array();
    
    $display = array('name' => 'Term display');
    
    $defaults['term_display'] = $display;
    
    return $defaults;
  }
}

/**
 * Implementation of hook_gmaps_references().
 */
function gmaps_term_gmaps_references($type, $object) {
  if($type == 'icon') {
    $refs = array();
    $icid = $object->icid;

    $icon = $protected_icon = array();
    $result = db_query("SELECT gtmo.*, t.name FROM {gmaps_term_marker_option} gtmo INNER JOIN {term_data} t ON gtmo.tid = t.tid");
    while($rec = db_fetch_object($result)) {
      if ($rec->icon == $icid) {
        $icon['icon_'. $rec->tid] = array(
          'title' => t($rec->name),
          'href' => 'admin/content/taxonomy/edit/term/'. $rec->tid,
        );
      }
      if ($rec->protected_icon == $icid) {
        $protected_icon['protected_icon_'. $rec->tid] = array(
          'title' => t($rec->name),
          'href' => 'admin/content/taxonomy/edit/term/'. $rec->tid,
        );
      }
    }
    if (!empty($icon)) {
      $refs[t('GMaps Term - Marker options - icons')] = $icon;
    }
    if (!empty($protected_icon)) {
      $refs[t('GMaps Term - Marker option - protected icons')] = $protected_icon;
    }
    
    if (!empty($refs)) { return $refs; }
  }
  else if ($type == 'map' || $type == 'static_map') {
    $refs = array();
    $field_type = 'gmaps_term_handler_field';
    
    foreach (views_get_all_views() as $view) {
      foreach($view->display as $display) {
        $view->set_display($display->id);
        $view->init_handlers();
        if (!empty($view->field)) {
          foreach($view->field as $key => $field) {
            if ($field instanceof $field_type && ($display->id == 'default' || !empty($display->display_options['fields'][$key]['override']))) {
              $add = FALSE;
              $gmaps = $display->display_options['fields'][$key]['gmaps']['map'];
              if ($type == 'map') {
                if ($gmaps['map'] && $gmaps['map'] == $object->mid) {
                  $add = TRUE;
                }
              }
              else {
                if ($gmaps['static_map'] && $gmaps['static_map'] == $object->mid) {
                  $add = TRUE;
                }
              }
              if ($add) {
                $refs['gmaps_term_view_field_'. $view->name .'_'. $display->id .'_'. $key] = array(
                  'title' => t('Field: <strong>@field</strong> on display: <strong>@display</strong> of view: <strong>@view</strong>', array('@field' => $field->ui_name(TRUE), '@view' => $view->name, '@display' => $display->display_title)),
                  'href' => "admin/build/views/edit/$view->name",
                  'html' => TRUE,
                );
              }
            }
          }
        }
      }
    }
    
    if (!empty($refs)) {
      return array(($type == 'map' ? t('GMaps term - map display options') : t('GMaps term - static map display options')) => $refs);
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function gmaps_term_theme($existing, $type, $theme, $path) {
  $path .= '/theme';
  $themes = array(
    'gmaps_term_formatter_default' => array(
      'arguments' => array('data' => NULL, 'data_type' => NULL, 'options' => array()),
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'gmaps_term_formatter_plain' => array(
      'arguments' => array('data' => NULL, 'data_type' => NULL, 'options' => array()),
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'gmaps_term_formatter_themed' => array(
      'arguments' => array('data' => NULL, 'data_type' => NULL, 'options' => array()),
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'gmaps_term_formatter_map' => array(
      'arguments' => array('data' => NULL, 'data_type' => NULL, 'options' => array()),
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'gmaps_term_formatter_static_map' => array(
      'arguments' => array('data' => NULL, 'data_type' => NULL, 'options' => array()),
      'file' => 'theme.inc',
      'path' => $path,
    ),
  );

  return $themes;
}

function gmaps_term_geo_data_render($data, $data_type, $options) {
  switch ($options['formatter']) {
    case 'default':
      $output = theme('gmaps_term_formatter_default', $data, $data_type, $options);
      break;
      
    case 'plain':
      $output = theme('gmaps_term_formatter_plain', $data, $data_type, $options);
      break;
      
    case 'themed':
      $output = theme('gmaps_term_formatter_themed', $data, $data_type, $options);
      break;
      
    case 'map':
      $output = theme('gmaps_term_formatter_map', $data, $data_type, $options);
      break;
      
    case 'static_map':
      $output = theme('gmaps_term_formatter_static_map', $data, $data_type, $options);
      break;
  }
  
  return $output;
}

function gmaps_term_point_sql_sort($coords, $alias = 'gtp', $order = NULL) {
  if ($cart = gmaps_coords_convert_latlng_to_cart($coords)) {
    $sql = "SQRT(POWER($alias.x - ". (float)$cart['x'] .", 2) + POWER($alias.y - ". (float)$cart['y'] .", 2) + POWER($alias.z - ". (float)$cart['z'] .", 2))";
  }
  else {
    $lat = deg2rad($coords->latitude);
    $lng = deg2rad($coords->longitude);
    $r = gmaps_coords_map_radius($coords);
    
    if ($r) {
      $sinlat = sin($lat);
      $sinlng = sin($lng);
      $coslat = cos($lat);
      $coslng = cos($lng);
      $sql = "(IFNULL(ACOS($coslat*COS(RADIANS($alias.latitude))*($coslng*COS(RADIANS($alias.longitude)) + $sinlng*SIN(RADIANS($alias.longitude))) + $sinlat*SIN(RADIANS($alias.latitude))), 0.00000)*$r)";
    }
  }
  if ($sql) {
    $sql .= ($order ? ' '. strtoupper($order) : '');
  }
  
  return $sql;
}

function gmaps_term_address_sql_filter($address, $alias = 'gta', $last = NULL, $strict = TRUE, $not = FALSE) {
  $parts = _gmaps_address_get_parts();
  
  $query = $args = array();
  
  $adr = drupal_clone($address);
  gmaps_address_prepare_record($adr);
  
  foreach($parts as $part => $label) {
    if (!empty($adr->$part)) {
      if ($not) {
        $query[] = $part == 'country' ? "$alias.$part != '%s'" : "$alias.u_$part != '%s'";
      }
      else {
        $query[] = $part == 'country' ? "$alias.$part = '%s'" : "$alias.u_$part = '%s'";
      }
      $args[] = $part == 'country' ? $adr->$part : $adr->{'u_'. $part};
    }
    else if (empty($last) || ($last != $part && gmaps_address_has_subpart($adr, $part))) {
      //country is always strict
      if ($part == 'country') {
        $query[] = $not ? "$alias.$part != ''" : "$alias.$part = ''";
      }
      else if ($strict) {
        $query[] = $not ? "$alias.u_$part IS NOT NULL" : "$alias.u_$part IS NULL";
      }
    }
    if ($part == $last) {
      break;
    }
  }
  
  if (!empty($query)) {
    return array(implode($not ? ' OR ' : ' AND ', $query), $args);
  }
  
  return NULL;
}

function gmaps_term_address_sql_filter_fast($address, $alias = 'gta', $strict = TRUE, $fields = GMAPS_TERM_FAST_FILTER_LOC) {
  $query = $args = array();
  
  $adr = drupal_clone($address);
  gmaps_address_prepare_record($adr);
  
  if (empty($adr->country)) {
    $query[] = "$alias.country = ''";
  }
  else {
    $query[] = "$alias.country = '%s'";
    $args[] = $adr->country;
  }
  
  if ($strict || !empty($adr->adminarea)) {
    if (empty($adr->adminarea)) {
      $query[] = "$alias.u_adminarea IS NULL";
    }
    else {
      $query[] = "$alias.u_adminarea = '%s'";
      $args[] = $adr->u_adminarea;
    }
  }
  
  if ($strict || !empty($adr->locality)) {
    $filters = array();
    if (empty($adr->locality)) {
      if (gmaps_term_fast_filter_check_field('locality', $fields)) {
        $filters[] = "$alias.u_locality IS NULL";
      }
      if (gmaps_term_fast_filter_check_field('deplocality', $fields)) {
        $filters[] = "$alias.u_deplocality IS NULL";
      }
      if (gmaps_term_fast_filter_check_field('postalcode', $fields)) {
        $filters[] = "$alias.u_postalcode IS NULL";
      }
      if (gmaps_term_fast_filter_check_field('thoroughfare', $fields)) {
        $filters[] = "$alias.u_thoroughfare IS NULL";
      }
    }
    else {
      if (gmaps_term_fast_filter_check_field('locality', $fields)) {
        $filters[] = "$alias.u_locality = '%s'";
        $args[] = $adr->u_locality;
      }
      if (gmaps_term_fast_filter_check_field('deplocality', $fields)) {
        $filters[] = "$alias.u_deplocality = '%s'";
        $args[] = $adr->u_locality;
      }
      if (gmaps_term_fast_filter_check_field('postalcode', $fields)) {
        $filters[] = "$alias.u_postalcode = '%s'";
        $args[] = $adr->u_locality;
      }
      if (gmaps_term_fast_filter_check_field('thoroughfare', $fields)) {
        $filters[] = "$alias.u_thoroughfare = '%s'";
        $args[] = $adr->u_locality;
      }
    }
    $query[] = '('. implode(' OR ', $filters) .')';
  }
  
  return array(implode(' AND ', $query), $args);
}

function gmaps_term_fast_filter_check_field($field, $const) {
  $test = 00000;
  
  switch($field) {
    case 'locality':
      $test = 01000;
      break;

    case 'deplocality':
      $test = 00100;
      break;

    case 'postalcode':
      $test = 00010;
      break;

    case 'thoroughfare':
      $test = 00001;
      break;

  }
  
  return (bool)($test & $const);
}

function gmaps_term_point_sql_filter_bounds($coords, $operator, $alias = 'gtp', $bounds = NULL) {
  $bounds = empty($bounds) ? $coords->bounds : $bounds;
  if (empty($bounds) || in_array($operator, array('=', '!='))) {
    return;
  }
  
  $filters = $args = array();

  if (in_array($operator, array('>', '>='))) {
    _gmaps_term_point_sql_filter_bounds_not($bounds, $operator, $alias, $filters, $args);
  }
  else {
    _gmaps_term_point_sql_filter_bounds($bounds, $operator, $alias, $filters, $args);
  }
  
  if (!empty($filters)) {
    return array(implode(' AND ', array_merge(array("$alias.map_type = '%s'"), $filters)), array_merge(array($coords->map_type), $args));
  }
}

function gmaps_term_point_sql_filter_distance($coords, $operator, $dist, $maxdist = NULL, $alias = 'gtp', $rounded = FALSE) {
  if (in_array($operator, array('=', '!='))) {
    return;
  }
  if (empty($dist) || gmaps_length_empty($dist)) {
    return;
  }
  
  $range = in_array($operator, array('between', 'not between'));
  if ($range && (empty($maxdist) || gmaps_length_empty($maxdist))) {
    return;
  }
  
  $not = $range ? (strpos($operator, 'not') === 0) : in_array($operator, array('>', '>='));
  
  $filters = $args = array();
    
  if (!$range) {
    $minbounds = gmaps_coords_bounds($coords, $dist, !$not);
    if (empty($minbounds)) {
      return;
    }
    if ($not) {
      _gmaps_term_point_sql_filter_bounds_not($minbounds, $operator, $alias, $filters, $args);
    }
    else {
      _gmaps_term_point_sql_filter_bounds($minbounds, $operator, $alias, $filters, $args);
    }
  }
  else {
    $minbounds = gmaps_coords_bounds($coords, $dist, $not);
    if (empty($minbounds)) {
      return;
    }
    $maxbounds = gmaps_coords_bounds($coords, $maxdist, !$not);
    if (empty($maxbounds)) {
      return;
    }
    
    if ($not) {
      _gmaps_term_point_sql_filter_bounds($minbounds, '<', $alias, $filters, $args);
      _gmaps_term_point_sql_filter_bounds_not($maxbounds, '>', $alias, $filters, $args);
    }
    else {
      _gmaps_term_point_sql_filter_bounds_not($minbounds, '>=', $alias, $filters, $args);
      _gmaps_term_point_sql_filter_bounds($maxbounds, '<=', $alias, $filters, $args);
    }
  }
  
  if (!empty($filters)) {
    if ($rounded) {
      _gmaps_term_point_sql_filter_rounded($coords, $operator, $dist, $maxdist, $alias, $filters, $args);
    }
    
    return array(implode(' AND ', array_merge(array("$alias.map_type = '%s'"), $filters)), array_merge(array($coords->map_type), $args));
  }

}

function _gmaps_term_point_sql_filter_bounds($bounds, $op, $alias = 'gtp', &$filters, &$args) {
  if (!in_array($op, array('<', '<='))) {
    return;
  }
  
  //northeast
  $filters[] = "$alias.latitude $op %f";
  $args[] = $bounds['northeast']->latitude;
  $filters[] = "$alias.longitude $op %f";
  $args[] = $bounds['northeast']->longitude;

  //northeast
  $op = ($op == '<') ? '>' : '>=';
  $filters[] = "$alias.latitude $op %f";
  $args[] = $bounds['southwest']->latitude;
  $filters[] = "$alias.longitude $op %f";
  $args[] = $bounds['southwest']->longitude;
}

function _gmaps_term_point_sql_filter_bounds_not($bounds, $op, $alias = 'gtp', &$filters, &$args) {
  if (!in_array($op, array('>', '>='))) {
    return;
  }
  $query = array();
  
  //northeast
  $query[] = "$alias.latitude $op %f";
  $args[] = $bounds['northeast']->latitude;
  $query[] = "$alias.longitude $op %f";
  $args[] = $bounds['northeast']->longitude;
  
  //southwest
  $op = ($op == '>') ? '<' : '<=';
  $query[] = "$alias.latitude $op %f";
  $args[] = $bounds['southwest']->latitude;
  $query[] = "$alias.longitude $op %f";
  $args[] = $bounds['southwest']->longitude;
  
  $filters[] = implode(' OR ', $query);
}

function _gmaps_term_point_sql_filter_rounded($coords, $operator, $dist, $maxdist = NULL, $alias = 'gtp', &$filters, &$args) {
  $dist = gmaps_length_convert($dist, GMAPS_DEFAULT_LENGTH_UNIT);
  if (empty($dist)) {
    return;
  }
  
  if (in_array($operator, array('between', 'not between'))) {
    $maxdist = gmaps_length_convert($maxdist, GMAPS_DEFAULT_LENGTH_UNIT);
    if (empty($maxdist)) {
      return;
    }
    
    if ($dist <= GMAPS_MAX_FAST_FILTER_DISTANCE && $maxdist <= GMAPS_MAX_FAST_FILTER_DISTANCE && ($cart = gmaps_coords_convert_latlng_to_cart($coords))) {
      if ($operator == 'between') {
        _gmaps_term_point_sql_distance_cart($cart, '>', $dist, $alias, $filters, $args);
        _gmaps_term_point_sql_distance_cart($cart, '<', $maxdist, $alias, $filters, $args);
      }
      else {
        _gmaps_term_point_sql_distance_cart($cart, '<', $dist, $alias, $filters, $args);
        _gmaps_term_point_sql_distance_cart($cart, '>', $maxdist, $alias, $filters, $args);
      }
    }
    else if ($operator == 'between') {
      _gmaps_term_point_sql_distance($coords, '>', $dist, $alias, $filters, $args);
      _gmaps_term_point_sql_distance($coords, '<', $maxdist, $alias, $filters, $args);
    }
    else {
      _gmaps_term_point_sql_distance($coords, '<', $dist, $alias, $filters, $args);
      _gmaps_term_point_sql_distance($coords, '>', $maxdist, $alias, $filters, $args);
    }
  }
  else {
    //fast filter
    if ($dist <= GMAPS_MAX_FAST_FILTER_DISTANCE && ($cart = gmaps_coords_convert_latlng_to_cart($coords))) {
      _gmaps_term_point_sql_distance_cart($cart, $operator, $dist, $alias, $filters, $args);
    }
    else {
      _gmaps_term_point_sql_distance($coords, $operator, $dist, $alias, $filters, $args);
    }
  }
}

function _gmaps_term_point_sql_distance_cart($cart, $operator, $dist, $alias = 'gtp', &$filters, &$args) {
  $filters[] = "SQRT(POWER($alias.x - %f, 2) + POWER($alias.y - %f, 2) + POWER($alias.z - %f, 2)) $operator %f";
  $args = array_merge($args, $cart);
  $args[] = $dist;
}

function _gmaps_term_point_sql_distance($coords, $operator, $dist, $alias = 'gtp', &$filters, &$args) {
  $lat = deg2rad($coords->latitude);
  $lng = deg2rad($coords->longitude);
  $r = gmaps_coords_map_radius($coords);
  
  if ($r) {
    $sinlat = sin($lat);
    $sinlng = sin($lng);
    $coslat = cos($lat);
    $coslng = cos($lng);
    $filters[] = "(IFNULL(ACOS($coslat*COS(RADIANS($alias.latitude))*($coslng*COS(RADIANS($alias.longitude)) + $sinlng*SIN(RADIANS($alias.longitude))) + $sinlat*SIN(RADIANS($alias.latitude))), 0.00000)*$r) $operator %f";
    $args[] = $dist;
  }
}


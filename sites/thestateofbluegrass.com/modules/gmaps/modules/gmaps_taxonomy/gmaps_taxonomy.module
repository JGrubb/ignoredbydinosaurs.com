<?php
// $Id: gmaps_taxonomy.module,v 1.1.2.6 2009/11/23 13:23:48 xmarket Exp $

/**
 * @file
 * Taxonomy integration for CCK Fields.
 */

/**
 * Simulated location taxonomy terms.
 */
define('GMAPS_TAXONOMY_LOCATION_TERMS_SIMULATED', 1);

/**
 * Integrated location taxonomy terms.
 */
define('GMAPS_TAXONOMY_LOCATION_TERMS_INTEGRATED', 2);

/**
 * Global location vocabulary.
 */
define('GMAPS_TAXONOMY_LOCATION_VOCABULARY_GLOBAL', 0);

/**
 * Continent based location vocabulary.
 */
define('GMAPS_TAXONOMY_LOCATION_VOCABULARY_CONTINENT', 1);

/**
 * Country based location vocabulary.
 */
define('GMAPS_TAXONOMY_LOCATION_VOCABULARY_COUNTRY', 2);

define('GMAPS_TAXONOMY_LOCATION_EMPTY_TERM', 'None - Unknown');

define('GMAPS_TAXONOMY_MENU_NAME', 'location_navigation');

define('GMAPS_TAXONOMY_CACHE_TABLE_LINKS', 'cache_gt_links');
define('GMAPS_TAXONOMY_CACHE_TABLE_PAGE', 'cache_gt_page');
define('GMAPS_TAXONOMY_CACHE_TABLE_RESULT', 'cache_gt_result');

/**
 * Implementation of hook_help().
 */
function gmaps_taxonomy_help($path, $arg) {
  if ($path == 'admin/content/taxonomy/edit/vocabulary/%') {
    $voc = taxonomy_vocabulary_load($arg[5]);
  }
  else if ($path == 'admin/content/taxonomy/%') {
    $voc = taxonomy_vocabulary_load($arg[3]);
  }
  else if ($path == 'admin/content/taxonomy/edit/term') {
    $term = taxonomy_get_term($arg[5]);
  }
  if ($voc || $term) {
    $location = variable_get('gmaps_taxonomy_location_terms', 0) == GMAPS_TAXONOMY_LOCATION_TERMS_INTEGRATED;
    $vids = variable_get('gmaps_taxonomy_location_vids', array());
    
    $letter = variable_get('gmaps_taxonomy_letter_terms', 0);
    $vid = variable_get('gmaps_taxonomy_letter_vid', 0);
    
    $test = $voc ? $voc->vid : $term->vid;
    if (($location && in_array($test, $vids)) || ($letter && $test == $vid)) {
      if ($voc) {
        return '<p>'. t('This is a designated vocabulary for Google Maps Tools. Some of the normal vocabulary options have been removed.') .'</p>';
      }
      else {
        return '<p>'. t('This term is in a vocabulary designated for Google Maps Tools. Some of the normal term options have been removed.') .'</p>';
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function gmaps_taxonomy_menu() {
  $items = array();

  $items['admin/settings/gmaps/taxonomy'] = array(
    'title' => 'Taxonomy',
    'description' => 'Configure GMaps Taxonomy settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gmaps_taxonomy_admin_settings'),
    'access arguments' => array('administer gmaps settings'),
    'file' => 'includes/gmaps_taxonomy.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/taxonomy/gmaps-delete'] = array(
    'title' => 'Delete all GMaps Taxonomy location vocabularies',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gmaps_taxonomy_delete_location_vocabularies'),
    'access callback' => 'gmaps_taxonomy_delete_locations_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/gmaps_taxonomy.admin.inc',
  );
  $items['taxonomy/location'] = array(
    'title' => 'Content by location',
    'description' => 'List content by location.',
    'page callback' => 'gmaps_taxonomy_location_page',
    'access arguments' => array('access content'),
    'file' => 'includes/gmaps_taxonomy.pages.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $menu_path = drupal_get_path('module', 'menu');
  $items['admin/build/menu-customize/'. GMAPS_TAXONOMY_MENU_NAME .'/list'] = array(
    'title' => 'List items',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'menu.admin.inc',
    'file path' => $menu_path,
  );
  $items['admin/build/menu-customize/'. GMAPS_TAXONOMY_MENU_NAME .'/add'] = array(
    'title' => FALSE,
    'page callback' => FALSE,
    'access callback' => FALSE,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/menu-customize/'. GMAPS_TAXONOMY_MENU_NAME .'/edit'] = array(
    'title' => FALSE,
    'page callback' => FALSE,
    'access callback' => FALSE,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/menu-customize/'. GMAPS_TAXONOMY_MENU_NAME .'/delete'] = array(
    'title' => FALSE,
    'page callback' => FALSE,
    'access callback' => FALSE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function gmaps_taxonomy_menu_alter(&$items) {
  $location = variable_get('gmaps_taxonomy_location_terms', 0);
  $letter = variable_get('gmaps_taxonomy_letter_terms', 0);
  $overwrite = variable_get('gmaps_taxonomy_term_page_overwrite', 0);
  if (($location || $letter) && $overwrite) {
    $disabled = FALSE;
    if (module_exists('views')) {
      $status = variable_get('views_defaults', array());
      if (isset($status['taxonomy_term'])) {
        $disabled = $status['taxonomy_term'];
      }
    }
    
    if ($disabled && $items['taxonomy/term/%']['page callback'] == 'taxonomy_term_page') {
      $items['taxonomy/term/%']['page callback'] = 'gmaps_taxonomy_term_page';
      $items['taxonomy/term/%']['file'] = 'includes/gmaps_taxonomy.pages.inc';
      $items['taxonomy/term/%']['file path'] = drupal_get_path('module', 'gmaps_taxonomy');
    }
    else {
      variable_set('gmaps_taxonomy_term_page_overwrite', 0);
    }
  }

  $items['admin/build/menu/item/%menu_link/reset']['access callback'] = 'gmaps_taxonomy_menu_link_access';
  $items['admin/build/menu/item/%menu_link/reset']['access arguments'] = array(4);
  $items['admin/build/menu/item/%menu_link/delete']['access callback'] = 'gmaps_taxonomy_menu_link_access';
  $items['admin/build/menu/item/%menu_link/delete']['access arguments'] = array(4);
}

/**
 * Implementation of hook_gmaps_address_field().
 */
function gmaps_taxonomy_gmaps_address_field($op, &$node, $field, &$items, $teaser, $page) {
  $gmaps = &$field['widget']['gmaps']['meta']['taxonomy'];
  if (in_array($op, array('insert', 'update'))
      && (($gmaps['location'] && variable_get('gmaps_taxonomy_location_terms', 0) == GMAPS_TAXONOMY_LOCATION_TERMS_INTEGRATED)
        || ($gmaps['letter'] && variable_get('gmaps_taxonomy_letter_terms', 0)))) {
    _gmaps_call_func('gmaps_taxonomy', 'node-form', '_gmaps_taxonomy_gmaps_address_field', array($op, &$node, $field, &$items, $teaser, $page));
  }
  if (in_array($op, array('update', 'delete revision'))) {
    cache_clear_all($node->nid .':'. $node->vid .':', GMAPS_TAXONOMY_CACHE_TABLE_LINKS, TRUE);
  }
  else if ($op == 'delete') {
    cache_clear_all($node->nid .':', GMAPS_TAXONOMY_CACHE_TABLE_LINKS, TRUE);
  }
  $settings = gmaps_taxonomy_get_settings('gmaps_taxonomy_page_cache');
  if ($settings['node_submit_clear']) {
    cache_clear_all('*', GMAPS_TAXONOMY_CACHE_TABLE_RESULT, TRUE);
    cache_clear_all('*', GMAPS_TAXONOMY_CACHE_TABLE_PAGE, TRUE);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function gmaps_taxonomy_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id && isset($form['taxonomy'])
    && (variable_get('gmaps_taxonomy_location_terms', 0) == GMAPS_TAXONOMY_LOCATION_TERMS_INTEGRATED || variable_get('gmaps_taxonomy_letter_terms', 0))) {
    _gmaps_call_func('gmaps_taxonomy', 'node-form', '_gmaps_taxonomy_node_form_alter', array(&$form, &$form_state));
  }
  else if ($form_id == 'taxonomy_overview_terms') {
    _gmaps_call_func('gmaps_taxonomy', 'admin', '_gmaps_taxonomy_overview_terms_alter', array(&$form, &$form_state));
  }
  else if ($form_id == 'taxonomy_form_term') {
    _gmaps_call_func('gmaps_taxonomy', 'admin', '_gmaps_taxonomy_form_term_alter', array(&$form, &$form_state));
  }
  else if ($form_id == 'taxonomy_form_vocabulary') {
    _gmaps_call_func('gmaps_taxonomy', 'admin', '_gmaps_taxonomy_form_vocabulary_alter', array(&$form, &$form_state));
  }
  else if ($form_id == 'content_field_edit_form' && in_array($form['#field']['type'], array('gmaps_address', 'gmaps_anp'))
    && (variable_get('gmaps_taxonomy_location_terms', 0) == GMAPS_TAXONOMY_LOCATION_TERMS_INTEGRATED || variable_get('gmaps_taxonomy_letter_terms', 0))) {
    $form['#submit'][] = 'gmaps_taxonomy_content_field_edit_form_submit';
  }
}

/**
 * Implementation of hook_taxonomy().
 */
function gmaps_taxonomy_taxonomy($op, $type, $array = NULL) {
  _gmaps_call_func('gmaps_taxonomy', 'admin', '_gmaps_taxonomy_taxonomy', array($op, $type, $array));
}

/**
 * Implementation of hook_nodeapi().
 */
function gmaps_taxonomy_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'load' && variable_get('gmaps_taxonomy_location_terms', 0) == GMAPS_TAXONOMY_LOCATION_TERMS_SIMULATED  && !count(taxonomy_node_get_terms($node))) {
    $type = content_types($node->type);
    $output = array();
    foreach($type['fields'] as $field_name => $field) {
      if (in_array($field['type'], array('gmaps_address', 'gmaps_anp')) && $field['widget']['gmaps']['meta']['taxonomy']['location'] && isset($node->$field_name) && !empty($node->$field_name)) {
        $need = TRUE;
        break;
      }
    }
    
    if ($need) {
      $output['taxonomy'] = array(
        0 => (object)array(
          'tid' => 0,
          'vid' => 0,
          'name' => 'dummy',
          'weight' => 0,
        )
      );
    }
    
    return $output;
  }
}

/**
 * Implementation of hook_link_alter().
 */
function gmaps_taxonomy_link_alter(&$links, $node) {
  return _gmaps_call_func('gmaps_taxonomy', 'links', '_gmaps_taxonomy_link_alter', array(&$links, $node));
}

/**
 * Implementation of hook_user().
 */
function gmaps_taxonomy_user($op, &$edit, &$user, $category = NULL) {
  if (in_array($op, array('update', 'delete'))) {
    gmaps_taxonomy_cache_clear_all('%:u'. $user->uid .'.');
  }
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_taxonomy_form_locale_languages_overview_form_alter(&$form, &$form_state) {
  $form['#submit'][] = '_gmaps_taxonomy_cache_related_form_submit';
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_taxonomy_form_locale_languages_edit_form_alter(&$form, &$form_state) {
  $form['#submit'][] = '_gmaps_taxonomy_cache_related_form_submit';
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_taxonomy_form_user_admin_perm_alter(&$form, &$form_state) {
  $form['#submit'][] = '_gmaps_taxonomy_cache_related_form_submit';
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_taxonomy_form_system_themes_form_alter(&$form, &$form_state) {
  $form['#submit'][] = '_gmaps_taxonomy_cache_related_form_submit';
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_taxonomy_form_system_theme_settings_alter(&$form, &$form_state) {
  $form['#submit'][] = '_gmaps_taxonomy_cache_related_form_submit';
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_taxonomy_form_menu_overview_form_alter(&$form, &$form_state) {
  if ($form['#menu']['menu_name'] == GMAPS_TAXONOMY_MENU_NAME) {
    $form['#theme'] = 'location_navigation_menu_overview_form';
  }
}

/**
 * Implementation of hook_form_hook_alter().
 */
function gmaps_taxonomy_form_menu_edit_item_alter(&$form, &$form_state) {
  if ($form['menu']['#item']['menu_name'] == GMAPS_TAXONOMY_MENU_NAME) {
    _gmaps_call_func('gmaps_taxonomy', 'admin', '_gmaps_taxonomy_form_menu_edit_item_alter', array(&$form, &$form_state));
  }
}

/**
 * Implementation of hook_theme().
 */
function gmaps_taxonomy_theme($existing, $type, $theme, $path) {
  $path .= '/includes';
  $themes = array(
    'gmaps_taxonomy_location_page' => array(
      'arguments' => array('result' => NULL),
      'file' => 'gmaps_taxonomy.pages.inc',
      'path' => $path,
    ),
    'gmaps_taxonomy_continents_page' => array(
      'file' => 'gmaps_taxonomy.pages.inc',
      'path' => $path,
    ),
    'gmaps_taxonomy_letter_selector' => array(
      'arguments' => array('path' => '', 'counter' => 0, 'title' => TRUE),
      'file' => 'gmaps_taxonomy.pages.inc',
      'path' => $path,
    ),
    'gmaps_taxonomy_subpart_selector' => array(
      'arguments' => array('subparts' => array(), 'term_str' => NULL, 'title' => TRUE),
      'file' => 'gmaps_taxonomy.pages.inc',
      'path' => $path,
    ),
    'location_navigation_menu_overview_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'gmaps_taxonomy.admin.inc',
      'path' => $path,
    ),
  );

  return $themes;
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function gmaps_taxonomy_theme_registry_alter(&$themes) {
  $themes['taxonomy_term_page']['file'] = 'taxonomy.pages.inc';
  $themes['taxonomy_term_page']['path'] = drupal_get_path('module', 'taxonomy');
}

/**
 * Implementation of hook_flush_caches().
 */
function gmaps_taxonomy_flush_caches() {
  return array(GMAPS_TAXONOMY_CACHE_TABLE_LINKS, GMAPS_TAXONOMY_CACHE_TABLE_PAGE, GMAPS_TAXONOMY_CACHE_TABLE_PAGE);
}

/**
 * Implementation of hook_block().
 */
function gmaps_taxonomy_block($op = 'list', $delta = 0, $edit = array()) {
  switch($op) {
    case 'list':
      $user_mask = BLOCK_CACHE_PER_ROLE;
      if (count(module_implements('node_grants'))) {
        $user_mask = BLOCK_CACHE_PER_USER;
      }
      
      $blocks = array();
      
      $blocks['letter'] = array(
        'info' => t('Taxonomy letter selector'),
        'cache' => BLOCK_CACHE_PER_PAGE | $user_mask,
      );
      
      $blocks['subpart'] = array(
        'info' => t('Taxonomy location subpart selector'),
        'cache' => BLOCK_CACHE_PER_PAGE | $user_mask,
      );
      
      return $blocks;
      
    case 'configure':
      if ($delta == 'letter') {
        $form = array();
        $form['gmaps_taxonomy_letter_counter'] = array('#type' => 'checkbox',
          '#title' => t('Show result counter in titles'),
          '#default_value' => variable_get('gmaps_taxonomy_letter_counter', 0),
        );
        return $form;
      }
      else if ($delta == 'subpart') {
        $form = array();
        $form['gmaps_taxonomy_subpart_counter'] = array('#type' => 'checkbox',
          '#title' => t('Show result counter in titles'),
          '#default_value' => variable_get('gmaps_taxonomy_subpart_counter', 0),
        );
        return $form;
      }
      break;
      
    case 'save':
      if ($delta == 'letter') {
        variable_set('gmaps_taxonomy_letter_counter', $edit['gmaps_taxonomy_letter_counter']);
      }
      else if ($delta == 'subpart') {
        variable_set('gmaps_taxonomy_subpart_counter', $edit['gmaps_taxonomy_subpart_counter']);
      }
      break;
      
    case 'view':
      if (strpos($_GET['q'], 'taxonomy/location/') === 0) {
        return _gmaps_call_func('gmaps_taxonomy', 'pages', '_gmaps_taxonomy_block_view', array($delta));
      }
  }
}

/**
 * Implementation of hook_cron().
 */
function gmaps_taxonomy_cron() {
  global $gmaps_throttle;
  
  $s = gmaps_taxonomy_get_settings('gmaps_taxonomy_menu');
  if ($s['enabled'] && variable_get('gmaps_taxonomy_menu_rebuild_needed', FALSE)
        && (!$s['delay'] || (variable_get('gmaps_taxonomy_menu_last_rebuild', 0) + $delay) <= time())) {
    //skip once if throttle is active
    $skipped = variable_get('gmaps_taxonomy_menu_skipped', FALSE);
    if (!$gmaps_throttle || $skipped) {
      if ($skipped) {
        variable_del('gmaps_taxonomy_menu_skipped');
      }
      variable_del('gmaps_taxonomy_menu_rebuild_needed');
      _gmaps_call_func('gmaps_taxonomy', 'cron', '_gmaps_taxonomy_menu_rebuild');
    }
    if ($gmaps_throttle && !$skipped) {
      variable_set('gmaps_taxonomy_menu_skipped', TRUE);
    }
  }
  
  //generate terms only when throttle is not active (or its support is disabled)
  if (!$gmaps_throttle) {
    module_load_include('inc', 'gmaps_taxonomy', 'includes/gmaps_taxonomy.cron');
    _gmaps_taxonomy_generate_locality_terms();
    _gmaps_taxonomy_generate_letter_terms();
  }
}

/**
 * Implementation of hook_robotstxt().
 */
function gmaps_taxonomy_robotstxt() {
  if (variable_get('gmaps_taxonomy_disallow_robots', FALSE)) {
    return array(
      'Disallow: /taxonomy/location/',
      'Disallow: /?q=taxonomy/location/',
    );
  }
}

/**
 * Implementation of hook_views_api().
 */
function gmaps_taxonomy_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'gmaps_taxonomy') .'/includes'
  );
}

/**
 * Implementation of hook_translated_menu_link_alter().
 */
function gmaps_taxonomy_translated_menu_link_alter(&$item, $map) {
  if (!empty($item['router_path']) && strpos($item['router_path'], 'taxonomy/location') === 0 && $item['link_path'] != $item['router_path'] && !$item['customized']) {
    $item['link_title'] = t($item['link_title']);
    $item['title'] = t($item['title']);
  }
}



function gmaps_taxonomy_location_terms_parse($arg) {
  if (empty($arg)) {
    return NULL;
  }
  //continent
  else if (strpos($arg, 'continent:') !== FALSE) {
    $continent = strtoupper(trim(array_pop(explode(':', $arg))));
    if (!empty($continent)) {
      $args = array();
      foreach(gmaps_get_countries() as $country) {
        if ($country['continent'] == $continent) {
          $args[] = (object)array('country' => $country['iso_alpha2'], 'last_part' => 'country');
        }
      }
      
      if (!empty($args)) {
        return array('locations' => $args, 'operator' => 'or', 'continent' => $continent);
      }
    }
  }
  //and
  else if (strpos($arg, ':') !== FALSE) {
    $locations = array();
    foreach(explode(':', $arg) as $adr) {
      if (($adr = gmaps_address_url_arg_parse($adr)) && !gmaps_address_empty($adr)) {
        $locations[] = $adr;
      }
    }
    if (!empty($locations)) {
      return array('locations' => $locations, 'operator' => 'and');
    }
  }
  //or
  else if (strpos($arg, '|') !== FALSE) {
    $locations = array();
    foreach(explode('|', $arg) as $adr) {
      if (($adr = gmaps_address_url_arg_parse($adr)) && !gmaps_address_empty($adr)) {
        $locations[] = $adr;
      }
    }
    if (!empty($locations)) {
      return array('locations' => $locations, 'operator' => 'or');
    }
  }
  //single address
  else {
    if (($adr = gmaps_address_url_arg_parse($arg)) && !gmaps_address_empty($adr)) {
      return array('locations' => array($adr), 'operator' => 'or');
    }
  }
  return NULL;
}

function gmaps_taxonomy_menu_link_access($item) {
  return $item['menu_name'] != GMAPS_TAXONOMY_MENU_NAME && user_access('administer menu');
}

function gmaps_taxonomy_content_field_edit_form_submit($form, &$form_state) {
  _gmaps_call_func('gmaps_taxonomy', 'admin', '_gmaps_taxonomy_content_field_edit_form_submit', array($form, &$form_state));
}

function gmaps_taxonomy_delete_locations_access() {
  $vids = variable_get('gmaps_taxonomy_location_vids', array());
  return user_access('administer taxonomy') && variable_get('gmaps_taxonomy_location_terms', 0) != GMAPS_TAXONOMY_LOCATION_TERMS_INTEGRATED && !empty($vids);
}

function gmaps_taxonomy_location_pathes($adr, $last = NULL) {
  static $self, $continents;
  $pathes = array();
  
  if (gmaps_address_empty($adr)) {
    return $pathes;
  }
  
  if (is_null($self)) {
    $self = TRUE;
    
    if (variable_get('gmaps_taxonomy_location_terms', 0) == GMAPS_TAXONOMY_LOCATION_TERMS_INTEGRATED && variable_get('gmaps_taxonomy_location_handler', 'gmaps') == 'taxonomy') {
      $self = FALSE;
    }
  }
  
  $countries = gmaps_get_countries();
  if (is_null($continents)) {
    $continents = geonames_continent_codes('short');
  }
  $parts = _gmaps_address_get_parts();
  
  if ($self) {
    $path = 'taxonomy/location/';
    
    $args = gmaps_address_url_args($adr, $last);
  
    if (variable_get('gmaps_taxonomy_location_continent_view', 1)) {
      $pathes['continent'] = $path .'continent:'. $countries[$adr->country]['continent'];
    }
    
    foreach($parts as $part => $label) {
      $pathes[$part] = $path . $args[$part];
      if ($part == $last) {
        break;
      }
    }
  }
  else {
    $path = 'taxonomy/term/';
    $vid = _gmaps_taxonomy_get_location_vocabulary($adr->country);
    
    if (!$vid) {
      return $pathes;
    }
    
    unset($parts['country'], $parts['thoroughfare']);
    
    if (variable_get('gmaps_taxonomy_location_vocabulary', GMAPS_TAXONOMY_LOCATION_VOCABULARY_GLOBAL) == GMAPS_TAXONOMY_LOCATION_VOCABULARY_GLOBAL
        && variable_get('gmaps_taxonomy_location_continent_term', 1)) {
      $term = _gmaps_taxonomy_get_location_term($continents[$countries[$adr->country]['continent']]['name'], $vid);
      $weight = 1;
      if (variable_get('gmaps_taxonomy_location_continent_view', 1)) {
        $pathes['continent'] = $path . $term->tid;
      }
    }
    else {
      $term = 0;
      $weight = 0;
    }
    
    $term = _gmaps_taxonomy_get_location_term($countries[$adr->country]['name'], $vid, $term, $weight);
    $pathes['country'] = $path . $term->tid;
    $weight++;
    
    if ($last == 'country') {
      return $pathes;
    }
    
    foreach($parts as $part => $label) {
      $name = NULL;
      if (!empty($adr->$part) || gmaps_address_has_subpart($adr, $part)) {
        $name = empty($adr->$part) ? GMAPS_TAXONOMY_LOCATION_EMPTY_TERM : $adr->$part;
        $term = _gmaps_taxonomy_get_location_term($name, $vid, $term, $weight);
        $weight++;
        if (!empty($adr->$part)) {
          $pathes[$part] = $path . $term->tid;
        }
      }
      if (is_null($name)) {
        break;
      }
      if ($last == $part) {
        break;
      }
    }
  }
  
  return $pathes;
}

function gmaps_taxonomy_get_settings($key) {
  $default = NULL;
  if ($key == 'gmaps_taxonomy_page') {
    $default = array(
      'page' => 10,
      'feed' => 10,
      'order' => '',
      'strict' => 0,
    );
  }
  else if ($key == 'gmaps_taxonomy_page_cache') {
    $default = array(
      'result' => 1,
      'result_expires' => 518400,
      'result_user_mask' => GMAPS_CACHE_PER_ROLE,
      'output' => 1,
      'output_expires' => '',
      'output_user_mask' => GMAPS_CACHE_PER_USER,
      'cids' => array(
        'geoip' => 0,
        'refloc' => 0,
      ),
      'node_submit_clear' => 0,
    );
  }
  else if ($key == 'gmaps_taxonomy_links_cache') {
    $default = array(
      'enabled' => 1,
      'expires' => 21600,
      'user_mask' => GMAPS_CACHE_PER_USER,
    );
  }
  else if ($key == 'gmaps_taxonomy_menu') {
    $default = array(
      'enabled' => 1,
      'levels' => array('continent', 'country', 'adminarea', 'locality'),
      'countries' => array(),
      'delay' => 86400,
      'set_customized' => 1,
    );
  }
  
  return $default ? variable_get($key, $default) : $default;
}

function gmaps_taxonomy_cache_clear_all($cid = NULL, $wildcard = TRUE) {
  cache_clear_all($cid, GMAPS_TAXONOMY_CACHE_TABLE_LINKS, $wildcard);
  cache_clear_all($cid, GMAPS_TAXONOMY_CACHE_TABLE_RESULT, $wildcard);
  cache_clear_all($cid, GMAPS_TAXONOMY_CACHE_TABLE_PAGE, $wildcard);
  
  cache_clear_all();
}





function _gmaps_taxonomy_get_location_vocabulary($c) {
  static $nodes, $continents;

  $countries = gmaps_get_countries();
  
  if (is_object($c)) {
    $c = $c->country;
  }

  if (variable_get('gmaps_taxonomy_location_terms', 0) != GMAPS_TAXONOMY_LOCATION_TERMS_INTEGRATED || empty($c) || !isset($countries[$c])) {
    return NULL;
  }
  
  if (is_null($nodes)) {
    $continents = geonames_continent_codes('short');
    $nodes = array();
    foreach (content_types() as $type_name => $type) {
      foreach($type['fields'] as $field_name => $field) {
        if (in_array($field['type'], array('gmaps_address', 'gmaps_anp')) && $field['widget']['gmaps']['meta']['taxonomy']['location']) {
          $nodes[$type_name] = 1;
          break;
        }
      }
    }
  }

  if (!count($nodes)) {
    return NULL;
  }
  
  $c = $countries[$c];
  
  $key = variable_get('gmaps_taxonomy_location_vocabulary', GMAPS_TAXONOMY_LOCATION_VOCABULARY_GLOBAL);
  if ($key == GMAPS_TAXONOMY_LOCATION_VOCABULARY_GLOBAL) {
    $key = 'all';
  }
  else if ($key == GMAPS_TAXONOMY_LOCATION_VOCABULARY_CONTINENT) {
    //two letters
    $key = $c['continent'];
  }
  else {
    //three letters
    $key = $c['iso_alpha3'];
  }
  
  $vids = variable_get('gmaps_taxonomy_location_vids', array());
  if (!isset($vids[$key])) {
    $edit = array('multiple' => 1, 'hierarchy' => 1, 'required' => 0, 'relations' => 0, 'tags' => 0, 'module' => 'gmaps_taxonomy', 'weight' => 0, 'nodes' => $nodes);
    if ($key == 'all') {
      $edit['name'] = 'Locations';
    }
    else if (strlen($key) == 2) {
     $edit['name'] = 'Locations in '. $continents[$key]['name']; 
    }
    else {
     $edit['name'] = 'Locations in '. $c['name']; 
    }
    taxonomy_save_vocabulary($edit);
    $vids[$key] = $edit['vid'];
    variable_set('gmaps_taxonomy_location_vids', $vids);
  }

  return $vids[$key];
}

function _gmaps_taxonomy_get_location_term($name, $vid, $parent = 0, $weight = 0) {
  if (is_object($parent)) {
    $tid = $parent->tid;
  }
  else if (is_array($parent)) {
    $tid = $parent['tid'];
  }
  else {
    $tid = $parent;
  }
  
  $db_result = db_query("SELECT t.tid, t.* FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE LOWER('%s') = LOWER(t.name) AND h.parent = %d AND t.vid = %d", trim($name), $tid, $vid);
  if ($term = db_fetch_object($db_result)) {
    return $term;
  }
  else {
    $term = array('name' => $name, 'vid' => $vid, 'parent' => $tid, 'weight' => $weight);
    taxonomy_save_term($term);
    return (object)$term;
  }
}

function _gmaps_taxonomy_cache_related_form_submit($form, &$form_state) {
  gmaps_taxonomy_cache_clear_all('*');
}

function _gmaps_taxonomy_get_location_breadcrumbs($adr, $term_str = '') {
  static $continents;
  $breadcrumbs = array(l(t('Home'), NULL));
  
  $countries = gmaps_get_countries();
  if (is_null($continents)) {
    $continents = geonames_continent_codes('short');
  }
  $parts = _gmaps_address_get_parts();
  unset($parts['country'], $parts['thoroughfare']);
  
  $path = 'taxonomy/location/';
  
  $term_str = $term_str ? '/'. $term_str : '';
  
  $args = gmaps_address_url_args($adr);

  $breadcrumbs[] = l(t($continents[$countries[$adr->country]['continent']]['name']), $path .'continent:'. $countries[$adr->country]['continent'] . $term_str);
    
  $breadcrumbs[] = l(t($countries[$adr->country]['name']), $path . $args['country'] . $term_str);
  
  foreach($parts as $part => $label) {
    if (!empty($adr->$part)) {
      $breadcrumbs[] = l($part != 'postalcode' ? t($adr->$part) : $adr->$part, $path . $args[$part] . $term_str);
    }
  }
  
  //last breadcrumb points to the current page
  array_pop($breadcrumbs);
    
  return $breadcrumbs;
}

function _gmaps_taxonomy_get_page_cache_id($result = TRUE) {
  global $base_root, $theme, $user;
  
  $cid_parts = array();
  $settings = gmaps_taxonomy_get_settings('gmaps_taxonomy_page_cache');
  $enabled = !empty($settings[$result ? 'result' : 'output']);
  
  if ($user->uid != 1 && $enabled) {
    //common parts
    $cid_parts[] = md5($base_root . request_uri());
    
    if (empty($theme)) {
      init_theme();
    }
    $cid_parts[] = $theme;
    if (module_exists('locale')) {
      global $language;
      $cid_parts[] = $language->language;
    }
    
    $user_mask = $settings[$result ? 'result_user_mask' : 'output_user_mask'];
    if (count(module_implements('node_grants'))) {
      $user_mask = GMAPS_CACHE_PER_USER;
    }
    if ($user_mask == GMAPS_CACHE_PER_ROLE) {
      $cid_parts[] = "r.". implode(',', array_keys($user->roles));
    }
    else if ($user_mask == GMAPS_CACHE_PER_USER) {
      $cid_parts[] = "u$user->uid.";
    }
    
    if (!$result) {
      if ($settings['cids']['geoip'] && module_exists('geoip') && ($ip = geoip_ip_address())) {
        $cid_parts[] = $ip;
      }
      if ($settings['cids']['refloc'] && ($refloc = gmaps_get_reference_location())) {
        $cid_parts[] = md5(serialize($refloc));
      }
    }
    
    return implode(':', $cid_parts);
  }
}


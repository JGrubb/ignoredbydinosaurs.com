<?php

/**
 * @file
 * Tests for geonames module.
 */

class GeoNamesTestCase extends DrupalWebTestCase {

  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('GeoNames'),
      'description' => t('Test basic functionality of GeoNames module - requires internet access.'),
      'group' => t('GeoNames'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('geonames');

    // Create and login user
    // $admin_user = $this->drupalCreateUser(array('access administration pages'));
    // $this->drupalLogin($admin_user);
    variable_set('geonames_commercial_active', FALSE);
    variable_set('geonames_cache', FALSE);
  }

  /**
   * Check geonames_query() with a simple search.
   */
  function testGeoNamesQuery() {
    // Setup configuration for the tests.
    variable_set('geonames_cache', TRUE);
    variable_set('geonames_reveal_cache', TRUE);

    // Perform a search for "Melbourne" which should return quite a few results.
    $query = array(
      'query' => 'Melbourne',
      'maxrows' => 5,
      'featureclass' => array('P'),
      // 'featurecode' => array('PPL', 'PPLA', 'PPLG', 'PPLR', 'PPLC', 'PPLS', 'STLM'),
      'style' => 'full',
    );
    $result = geonames_query('search', $query);
    $this->assertNotEqual($result, FALSE, t('Execution of "search" succeeded'));

    // Check the results of the search.
    $this->assertTrue($result->total_results_count > 5, t('At least FIVE results found for "Melbourne"'));
    $this->assertEqual(count($result->results), 5, t('FIVE results returned (maxrows)'));

    // Check for a couple of results that should be there: Melbourne, Australia;
    // and Melbourne, FL, US
    $found_melau = $found_melfl = FALSE;
    foreach ($result->results as $res) {
      if ($res['name'] == 'Melbourne' && $res['countrycode'] == 'AU') {
        $found_melau = TRUE;
      }
      if ($res['name'] == 'Melbourne' && $res['countrycode'] == 'US' && $res['admincode1'] == 'FL') {
        $found_melfl = TRUE;
      }
    }
    $this->assertTrue($found_melau, t('Found Melbourne, Australia'));
    $this->assertTrue($found_melfl, t('Found Melbourne, Florida, USA'));

    // Perform the same search again, and check that we got the same results,
    // and the cache was used.
    $result2 = geonames_query('search', $query);
    $this->assertTrue($result2->request['cached'], t('Second geonames query is cached'));
    $this->assertEqual($result->total_results_count, $result2->total_results_count, t('Cached and uncached results are the same count'));
    $this->assertEqual($result->results, $result2->results, t('Cached and uncached results are the same data'));

    module_load_include('inc', 'geonames', 'geonames.admin');
    $this->assertEqual(_geonames_cache_items(), 1, t('One entry in the cache after one query'));

    // TODO: Check a query which names the columns it wants explicitly
    // $query['columns'] = array('geonameid', 'countrycode', 'countryname');
    // $result3 = geonames_query('search', $query);
    // error_log(print_r($result3, TRUE));
  }


  /**
   * Make a call to (the real) geonames_query, and keep track of which services
   * have been executed in $this->services (an array of service name keys).
   * @see geonames_query
   */
  function geonames_query($service, $query = array(), $options = NULL) {
    unset($this->services[$service]);
    $result = geonames_query($service, $query, $options);
    $this->assertNotEqual($result, FALSE, t("Execution of \"$service\" succeeded"));
    return $result;
  }


  function testAllServices() {
    // Store a list of services in $this->services so we can "cross them off" as
    // each is executed via $this->geonames_query
    $this->services = array_flip(geonames_config('services'));
    ksort($this->services);
    // $this->verbose("All Services: ". join(', ', array_keys($this->services)));

    // Test the astergdem service
    $query = array('lat' => 50.01, 'lng' => 10.2);
    $results = $this->geonames_query('astergdem', $query);
    $this->assertEqual($results->total_results_count, 1, t('One result for astergdem service'));
    $result = $results->results[0];
    $this->assertEqual($result['astergdem'], "192", t('Found expected result for fixed coordinates for astergdem service'));

    // Test the "children" service
    $query = array('geonameid' => 3175395);
    $results = $this->geonames_query('children', $query);
    $this->assertTrue($results->total_results_count > 5, t('At least 5 regions found for Italy'));
    $all_ok = TRUE;
    foreach ($results->results as $result) {
      $all_ok = $all_ok && ($result['countrycode'] == 'IT');
    }
    $this->assert($all_ok, "All regions from 'children' are in Italy");

    // Test the "cities" service
    $query = array('north' => 44.1, 'south' => -9.9, 'east' => -22.4, 'west' => 55.2, 'maxrows' => 8);
    $results = $this->geonames_query('cities', $query);
    $this->assertEqual($results->total_results_count, 8, 'Found 8 result from "city"');
    $result = $results->results[0];
    $this->assertEqual($result['name'], 'Mexico City', t('Found "Mexico City" from "cities"'));
    $this->assertEqual($result['countrycode'], 'MX', t('Found MX from "cities"'));

    // Test the "countryCode" service
    $query = array('lat' => 47.03, 'lng' => 10.2);
    $results = $this->geonames_query('countrycode', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "countryCode"');
    $result = $results->results[0];
    $this->assertEqual($result['countrycode'], 'AT', t('Found "AT" from "countryCode"'));
    $this->assertEqual($result['countryname'], 'Austria', t('Found "Austria" from "countryCode"'));

    // Test the "countryInfo" service
    $query = array('country' => 'DE');
    $results = $this->geonames_query('countryinfo', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "countryInfo"');
    $result = $results->results[0];
    $this->assertEqual($result['countrycode'], 'DE', t('Found "DE" from "countryInfo"'));
    $this->assertEqual($result['countryname'], 'Germany', t('Found "Germany" from "countryInfo"'));
    $this->assertEqual($result['continent'], 'EU', t('Found "EU" from "countryInfo"'));

    // Test the "countrySubdivision" service: Lookup Tyrol, AT by lat/long
    $query = array('lat' => 47.03, 'lng' => 10.2);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "countrySubdivision"');
    $results = $this->geonames_query('countrysubdivision', $query);
    $result = $results->results[0];
    $this->assertEqual($result['countrycode'], 'AT', t('Found AT by lat/lng'));
    $this->assertEqual($result['countryname'], 'Austria', t('Found Austria by lat/lng'));
    $this->assertEqual($result['adminname1'], 'Tyrol', t('Found Tyrol, Austria by lat/lng'));

    // Test the "extendedFindNearby" service : US
    $query = array('lat' => 37.451, 'lng' => -122.18);
    $results = $this->geonames_query('extendedFindNearby', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "extendedFindNearby" A');
    $result = $results->results[0];
    $this->assertEqual($result['street'], 'Roble Ave', t('Found "Roble Ave" from "extendedFindNearby" A'));
    $this->assertEqual($result['streetnumber'], '671', t('Found "61" from "extendedFindNearby" A'));

    // Test the "extendedFindNearby" service : other countries
    $query = array('lat' => 47.3, 'lng' => 9);
    $results = $this->geonames_query('extendedFindNearby', $query);
    $this->assertTrue($results->total_results_count >= 5, 'Found at least 5 levels in "extendedFindNearby" B');
    $this->assertEqual($results->results[0]['name'], 'Earth', t('Found "Earth" from "extendedFindNearby" B'));
    $this->assertEqual($results->results[1]['name'], 'Europe', t('Found "Europe" from "extendedFindNearby" B'));
    $this->assertEqual($results->results[2]['name'], 'Switzerland', t('Found "Switzerland" from "extendedFindNearby" B'));
    $this->assertEqual($results->results[3]['name'], 'Kanton St. Gallen', t('Found "Kanton St. Gallen" from "extendedFindNearby" B'));
    $this->assertEqual($results->results[$results->total_results_count - 1]['geonameid'], 6559633, t('Found (geonameid) "6559633" from "extendedFindNearby" B'));

    // Test the "extendedFindNearby" service : ocean
    $query = array('lat' => 40.78343, 'lng' => -43.96625);
    $results = $this->geonames_query('extendedFindNearby', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "extendedFindNearby" C');
    $result = $results->results[0];
    $this->assertEqual($result['name'], 'North Atlantic Ocean', t('Found "North Atlantic Ocean" from "extendedFindNearby" C'));

    // Test the "findNearByWeather" service
    $query = array('lat' => 43, 'lng' => -2);
    $results = $this->geonames_query('findNearByWeather', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "findNearByWeather"');
    $result = $results->results[0];
    $this->assertEqual($result['stationname'], 'San Sebastian / Fuenterrabia', t('Found "San Sebastian / Fuenterrabia" from "findNearByWeather"'));

    // Test the "findNearbyStreets" service
    $query = array('lat' => 37.451, 'lng' => -122.18);
    $results = $this->geonames_query('findNearbyStreets', $query);
    $this->assertEqual($results->total_results_count, 10, 'Found multiple results from "findNearbyStreets"');
    $result = $results->results[0];
    $this->assertEqual($result['name'], 'Roble Ave', t('Found "Roble Ave" from "findNearbyStreets"'));
    // Test the "findNearbyStreetsOSM" service
    $query = array('lat' => 37.451, 'lng' => -122.18);
    $results = $this->geonames_query('findNearbyStreetsOSM', $query);
    $this->assertTrue($results->total_results_count > 3, 'Found multiple results from "findNearbyStreetsOSM"');
    $result = $results->results[0];
    $this->assertEqual($result['name'], 'Roble Avenue', t('Found "Roble Avenue" from "findNearbyStreetsOSM"'));
    $this->assertEqual($result['highway'], 'residential', t('Roble Ave is residential'));
    $this->assertEqual($result['distance'], '0.08', t('Roble Ave is 0.08km? away'));

    // Test the "findNearestAddress" service
    $query = array('lat' => 37.451, 'lng' => -122.18);
    $results = $this->geonames_query('findNearestAddress', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "findNearestAddress"');
    $result = $results->results[0];
    $this->assertEqual($result['street'], 'Roble Ave', t('Found "Roble Ave" from "findNearestAddress"'));
    $this->assertEqual($result['streetnumber'], '671', t('Found "61" from "findNearestAddress"'));

    // Test the "findNearestIntersection" service
    $query = array('lat' => 37.451, 'lng' => -122.18);
    $results = $this->geonames_query('findNearestIntersection', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "findNearestIntersection"');
    $result = $results->results[0];
    $this->assertEqual($result['street1'], 'Roble Ave', t('Found "Roble Ave" from "findNearestIntersection"'));
    $this->assertEqual($result['street2'], 'Curtis St', t('Found "Curtis St" from "findNearestIntersection"'));
    // Test the "findNearestIntersectionOSM" service
    $query = array('lat' => 37.451, 'lng' => -122.18);
    $results = $this->geonames_query('findNearestIntersectionOSM', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "findNearestIntersectionOSM"');
    $result = $results->results[0];
    $this->assertEqual($result['street1'], 'Roble Avenue', t('Found "Roble Avenue" from "findNearestIntersectionOSM"'));
    $this->assertEqual($result['highway1'], 'residential', t('Roble Avenue is residential'));
    $this->assertEqual($result['street2'], 'Curtis Street', t('Found "Curtis Street" from "findNearestIntersectionOSM"'));
    $this->assertEqual($result['highway2'], 'residential', t('Curtis Street is residential'));

    // Check the "get" service (this uses a different XML format)
    // 2158177 is the geonameid for Melbourne, Australia
    $results = $this->geonames_query('get', array('geonameid' => 2158177));
    $result = $results->results[0];
    $this->assertEqual($result['name'], 'Melbourne', t('Found Melbourne (name) by geonameid'));
    $this->assertEqual($result['countrycode'], 'AU', t('Found Melbourne (countrycode) by geonameid'));
    $this->assertEqual($result['fcode'], 'PPLA', t('Found Melbourne (fcode) by geonameid'));

    // Test the "gtopo30" service - different XML format: doesn't work yet!
    $query = array('lat' => 47.01, 'lng' => 10.2);
    $results = $this->geonames_query('gtopo30', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "gtopo30"');

    // Test the "hierarchy" service
    $results = $this->geonames_query('hierarchy', array('geonameid' => 2657896 ));
    $this->assertTrue($results->total_results_count >= 5, 'Found at least 5 result from "hierarchy"');
    $this->assertEqual($results->results[0]['name'], 'Earth', 'Found "Earth" in hierarchy to Zurich');
    $this->assertEqual($results->results[1]['name'], 'Europe', 'Found "Europe" in hierarchy to Zurich');
    $this->assertEqual($results->results[2]['name'], 'Switzerland', 'Found "Switzerland" in hierarchy to Zurich');
    $this->assertEqual($results->results[$results->total_results_count - 1]['name'], 'Zurich', 'Found "Zurich" in hierarchy to Zurich');

    // Test the "findnearby" service
    $results = $this->geonames_query('findnearby', array('lat' => 47.03, 'lng' => 10.2));
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "nearby"');
    $result = $results->results[0];
    $this->assertEqual($result['name'], 'Talliger', t('Found "Talliger" from "nearby"'));
    $this->assertEqual($result['countrycode'], 'AT', t('Found AT by lat/lng from "nearby"'));

    // Test the "nearbyPlaceName" service
    $query = array('lat' => '28.500103', 'lng' => '-81.357992', 'radius' => 50, 'style' => 'full', 'maxrows' => 10);
    $options = array('sortby' => 'population', 'sortorder' => 'desc');
    $results = $this->geonames_query('findnearbyplacename', $query, $options);
    $this->assertEqual($results->total_results_count, 10, 'Found 10 result from "nearbyPlaceName"');
    $all_ok = TRUE;
    foreach ($results->results as $result) {
      $all_ok = $all_ok && ($result['adminname1'] == 'Florida');
    }
    $this->assert($all_ok, "All nearbyPlaceName are in Florida");

    // Test the "findNearbyPostalCodes" service (by lat/lon)
    $query = array('lat' => '28.500103', 'lng' => '-81.357992', 'radius' => 10, 'style' => 'full');
    $results = $this->geonames_query('findnearbypostalcodes', $query);
    $this->assertTrue($results->total_results_count > 3, 'Found >3 result from "findnearbypostalcodes" A');
    $all_ok = TRUE;
    foreach ($results->results as $result) {
      $all_ok = $all_ok && ($result['adminname1'] == 'Florida');
    }
    $this->assert($all_ok, "All findNearbyPostalCodes-A are in Florida");

    // Test the "findNearbyPostalCodes" service (by postalcode)
    $query = array('postalcode' => 8775, 'country' => 'CH', 'radius' => 10);
    $results = $this->geonames_query('findnearbypostalcodes', $query);
    $this->assertTrue($results->total_results_count > 3, 'Found >3 result from "findnearbypostalcodes" B');
    $all_ok = TRUE;
    foreach ($results->results as $result) {
      $all_ok = $all_ok && ($result['countrycode'] == 'CH');
    }
    $this->assert($all_ok, "All findNearbyPostalCodes-B are in Florida");

    // Test  "findnearbywikipedia" service (by lat/lon)
    $query = array('lat' => '28.500103', 'lng' => '-81.357992', 'radius' => 10, 'style' => 'full');
    $results = $this->geonames_query('findnearbywikipedia', $query);
    $this->assertTrue($results->total_results_count > 3, 'Found >3 result from "findnearbywikipedia" A');
    $all_ok = TRUE;
    foreach ($results->results as $result) {
      $all_ok = $all_ok && $result['wikipediaurl'];
    }
    $this->assert($all_ok, "All findNearbyWikipedia-A have wikipedia URLs");

    // Test the "findNearbyWikipedia" service (by postalcode)
    $query = array('postalcode' => 8775, 'country' => 'CH', 'radius' => 10);
    $results = $this->geonames_query('findnearbywikipedia', $query);
    $this->assertTrue($results->total_results_count > 3, 'Found >3 result from "findnearbywikipedia" B');
    $all_ok = TRUE;
    foreach ($results->results as $result) {
      $all_ok = $all_ok && $result['wikipediaurl'];
    }
    $this->assert($all_ok, "All findNearbyWikipedia-B have wikipedia URLs");

    // Test the "neighbourhood" service
    $query = array('lat' => 40.78343, 'lng' => -73.96625);
    $results = $this->geonames_query('neighbourhood', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "neighbourhood"');
    $result = $results->results[0];
    $this->assertEqual($result['name'], 'Central Park', t('Found "Central Park" from "neighbourhood"'));

    // Test the "neighbours" service
    $results = $this->geonames_query('neighbours', array('geonameid' => 3017382 )); // France
    $this->assert($results->total_results_count > 5, 'Found at least 5 results for neighbours to France');
    $known = 0;
    foreach ($results->results as $result) {
      if ($result['name'] == 'Italy' || $result['name'] == 'Germany' || $result['name'] == 'Spain') {
        $known++;
      }
    }
    $this->assertEqual($known, 3, t('Found all known neighbours of France'));

    // Test the "ocean" service
    $query = array('lat' => 40.78343, 'lng' => -43.96625);
    $results = $this->geonames_query('ocean', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result from "ocean"');
    $result = $results->results[0];
    $this->assertEqual($result['name'], 'North Atlantic Ocean', t('Found "North Atlantic Ocean" from "ocean"'));

    // Test the "postalCodeCountryInfo" service
    $results = $this->geonames_query('postalcodecountryinfo');
    $this->assert($results->total_results_count > 50, 'Found >50 results for postalcodecountryinfo');
    $all_ok = TRUE;
    foreach ($results->results as $result) {
      $all_ok = $all_ok && $result['numpostalcodes'];
    }
    $this->assert($all_ok, "All postalcodecountryinfo have postalcodes");

    // Test the "postalCodeSearch" service
    $query = array('postalcode' => 3805, 'country' => 'AU');
    $results = $this->geonames_query('postalcodesearch', $query);
    $this->assert($results->total_results_count > 0, 'Found at least one results for postalcodesearch');
    $found = FALSE;
    foreach ($results->results as $result) {
      $found = $found || ($result['name'] == 'Narre Warren');
    }
    $this->assert($found, "Found 'Narre Warren' for postalcode 3805 in AU");

    // Test the "siblings" service
    $results = $this->geonames_query('siblings', array('geonameid' => 3017382 )); // France
    $this->assert($results->total_results_count > 20, 'Found at least 20 results for siblings');

    // Test the "srtm3" service
    $query = array('lat' => 50.01, 'lng' => 10.2);
    $results = $this->geonames_query('srtm3', $query);
    $this->assertEqual($results->total_results_count, 1, t('One result for srtm3 service'));
    $result = $results->results[0];
    $this->assertEqual($result['srtm3'], 206, t('Found expected result for fixed coordinates for srtm3 service'));

    // Test the "timezone" service
    $query = array('lat' => '28.500103', 'lng' => '-81.357992', 'radius' => 10);
    $results = $this->geonames_query('timezone', $query);
    $this->assertEqual($results->total_results_count, 1, 'Found 1 result for timezone');
    $result = $results->results[0];
    $this->assertEqual($result['timezoneid'], 'America/New_York', 'Found TZ "America/New_York" result for timezone');

    // Test the "wikipediaBoundingBox" service
    // http://ws.geonames.org/wikipediaBoundingBox?north=44.1&south=-9.9&east=-22.4&west=55.2
    $query = array('north' => 44.1, 'south' => -9.9, 'east' => -22.4, 'west' => 55.2);
    $results = $this->geonames_query('wikipediaboundingbox', $query);
    $this->assert($results->total_results_count > 10, 'Found >10 result for wikipediaBoundingBox');

    // Test the "wikipediaSearch" service
    $query = array('query' => 'Melbourne');
    $results = $this->geonames_query('wikipediasearch', $query);
    $this->assert($results->total_results_count > 10, 'Found >10 result for wikipediasearch');

    // Test the "search" service
    $query = array('query' => 'Melbourne', 'maxrows' => 5);
    $result = $this->geonames_query('search', $query);
    $this->assertTrue($result->total_results_count > 5, t('At least FIVE results found for "Melbourne"'));
    $this->assertEqual(count($result->results), 5, t('FIVE results returned (maxrows)'));

    // Test the astergdem service
    $query = array('lat' => 50.01, 'lng' => 10.2);
    $results = $this->geonames_query('gtopo30', $query);
    $this->assertEqual($results->total_results_count, 1, t('One result for gtopo30 service'));
    $result = $results->results[0];
    $this->assertEqual($result['gtopo30'], "205", t('Found expected result for fixed coordinates for gtopo30 service'));


    // Test the weatherIcao service
    $query = array('code' => 'LSZH');
    $results = $this->geonames_query('weatherIcao', $query);
    $this->assertEqual($results->total_results_count, 1, t('One result for weatherIcao service'));
    $result = $results->results[0];
    $this->assertEqual($result['stationname'], 'Zurich-Kloten', t('Found expected station name for weatherIcao'));
    $this->assertEqual($result['icao'], 'LSZH', t('Found expected station code for weatherIcao'));
    $this->assertEqual($result['countrycode'], 'CH', t('Found expected country code for weatherIcao'));
    $this->assertEqual($result['elevation'], '432', t('Found expected station elevation for weatherIcao'));

    // Check that ALL services have been executed
    $unused_services = count($this->services);
    if ($unused_services) {
      $this->assert(FALSE, "$unused_services services have not been called: ". join(', ', array_keys($this->services)));
    }
    else {
      $num_services = count(geonames_config('services'));
      $this->assert(TRUE, "All $num_services services called.");
    }

  }

  function testCacheSorting() {
    variable_set('geonames_cache', TRUE);
    variable_set('geonames_reveal_cache', TRUE);

    // Test that results from cache are sorted the same as uncached results
    // See http://drupal.org/node/623720
    $query = array('lat' => '28.500103', 'lng' => '-81.357992', 'radius' => 50, 'style' => 'full', 'maxrows' => 10);
    $options = array('sortby' => 'population', 'sortorder' => 'desc');
    $results = geonames_query('findnearbyplacename', $query, $options);
    if (array_key_exists('cached', $results->request)) {
      $this->assertNotEqual($results->request['cached'], 'result', 'First request for sorted results IS NOT cached');
    }
    $last_population = PHP_INT_MAX;
    foreach ($results->results as $result) {
      if ($result['population'] != '') {
        $this->assertTrue($result['population'] < $last_population, "Population of $result[name] ($result[population]) <= $last_population");
        $last_population = $result['population'];
      }
    }

    // Retest with cached results
    $results = geonames_query('findnearbyplacename', $query, $options);
    $this->assertEqual($results->request['cached'], 'result', 'Second request for sorted results IS cached');
    $last_population = PHP_INT_MAX;
    foreach ($results->results as $result) {
      if ($result['population'] != '') {
        $this->assertTrue($result['population'] < $last_population, "Population of $result[name] ($result[population]) <= $last_population");
        $last_population = $result['population'];
      }
    }
  }

  /**
   * Check that GeoNames loads country-info and feature-codes metadata from
   * Geonames, and returns it to local queries.
   */
  function testMetaData() {
    // Update the MetaData, and check it updated the last-updated value
    variable_set('geonames_metadata_updated', 0);
    geonames_metadata_update();
    $updated = variable_get('geonames_metadata_updated', 0);
    $this->assertTrue($updated > 0, t('MetaData was updated successfully'));

    // Check countryinfo
    $numcountries = db_result(db_query('SELECT COUNT(*) FROM {geonames_countryinfo}'));
    $this->assertTrue($numcountries > 200, t('At least 200 countries in metadata'));
    $aus1 = geonames_countryinfo('AU');
    $this->assertEqual($aus1['name'], 'Australia', t('Australia countryinfo found by country code'));
    $aus2 = geonames_countryinfo('Australia');
    $this->assertEqual($aus2['iso_alpha2'], 'AU', t('Australia countryinfo found by name'));
    $this->assertEqual($aus1, $aus2, t('Lookup by country code matches lookup by name'));

    $num_iso_numeric = db_result(db_query('SELECT COUNT(DISTINCT(iso_numeric)) FROM {geonames_countryinfo}'));
    $this->assertEqual($numcountries, $num_iso_numeric, t('All countries have distinct ISO numeric codes'));

    // Check geonames_countries()
    $oc_countries = geonames_countries(array('continent' => 'OC'));
    $this->assertTrue(count($oc_countries) > 10, t('Found >10 Oceania countries'));
    $this->assertTrue(count($oc_countries) < 50, t('Found <50 Oceania countries'));

    // Check featurecodes
    $numcountries = db_result(db_query('SELECT COUNT(*) FROM {geonames_featurecodes}'));
    $this->assertTrue($numcountries > 500, t('At least 500 feature codes in metadata'));
    $info = geonames_featureinfo('ADMD');
    $this->assertEqual($info['name'], 'administrative division', 'Found ADMD:administrative division (featurecode)');
  }

  function testHelperFunctions() {
    // Check Continent Codes
    $codes = geonames_continent_codes();
    $this->assertEqual(count($codes), 7, t('Seven continents found'));
    $codes_by_cc = geonames_continent_codes('short');
    $this->assertEqual(count($codes_by_cc), 7, t('Seven continents found by CC'));
    $this->assertEqual($codes_by_cc['OC']['name'], 'Oceania', t('Oceanie found in continent list by CC'));

    // Check US States (technically DC isn't a state, but we'll let that one slide...)
    $states = geonames_us_states();
    $this->assertEqual(count($states), 51, t('51 states found'));
    $this->assertEqual(geonames_us_states('CA'), 'California', t('California found'));
  }

  /**
   * Check that the Geonames module implements ALL of the services described on
   * the website that return XML results.
   */
  function testGeonamesCompleteness() {
    // Fetch the webservices overview HTML page from geonames.org
    $overview_url = 'http://www.geonames.org/export/ws-overview.html';
    $response = drupal_http_request($overview_url .'?app=drupal');
    $num = preg_match_all('#<tr[^>]*>\s*<td>\d+</td>(.*?)</tr>#s', $response->data, $rows);
    $this->assertTrue($num > 10, t('At least 10 table rows found'));

    // Build a list of XML services from geonames...
    $service_names = array();
    foreach ($rows[1] as $row) {
      if (preg_match('#<td><a target=_BLANK href="[^"]*">(\w+)</a>.*?</td>\s*<td>.*>XML</a>#', $row, $bits)) {
        $service_names[] = strtolower($bits[1]);
      }
    }
    $this->assertTrue(count($service_names) > 10, t('At least 10 services found'));

    // ...and a list of services provided by this module.
    $config_service_names = array();
    foreach (geonames_config() as $config) {
      $config_service_names[] = strtolower($config['service_name']);
    }

    // Check that we implement all of them...
    foreach (array_diff($service_names, $config_service_names) as $service_name) {
      $this->assertTrue(FALSE, t('Geonames service "%name" not supported', array('%name' => $service_name)));
    }

    // ...and no others
    foreach (array_diff($config_service_names, $service_names) as $service_name) {
      $this->assertTrue(FALSE, t('Module service "%name" not supported by geonames', array('%name' => $service_name)));
    }
  }
}
